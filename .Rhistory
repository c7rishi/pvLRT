data.matrix() %>%
magrittr::set_rownames(
rownames(.) %>%
str_to_title()
) %>%
magrittr::set_colnames(
colnames(.) %>%
str_to_title()
)
)
## code to prepare `DATASET` dataset goes here
for (xx in names(all_data)) assign(xx, all_data[[xx]])
usethis::use_data(statin, overwrite = TRUE, compress = "xz")
usethis::use_data(statin1491, overwrite = TRUE, compress = "xz")
usethis::use_data(statin46, overwrite = TRUE, compress = "xz")
usethis::use_data(gbca, overwrite = TRUE, compress = "xz")
usethis::use_data(rv, overwrite = TRUE, compress = "xz")
usethis::use_data(rvyoung, overwrite = TRUE, compress = "xz")
usethis::use_data(rvold, overwrite = TRUE, compress = "xz")
library(pvLRT)
2.4/6
2.4/12
1.0/12
devtools::check_win_devel()
devtools::check_win_oldrelease()
devtools::check_win_release()
library(pvLRT)
library(pvLRT)
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_oldrelease()
library(GLMMadaptive)
library(pvLRT)
data("statin46")
library(tidyverse)
library(data.table)
library(GLMMadaptive)
library(pvLRT)
dat <- statin46 %>%
data.matrix()
dat
dat <- statin46 %>%
data.matrix() %>%
data.table::as.data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "AE")
dat
dat <- statin46 %>%
data.matrix() %>%
data.table::as.data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "AE") %>%
data.table::melt.data.table(
id.vars = c("AE"),
variable.name = "Drug",
value.name = "n"
)
dat
?data.table::DT
?DT
dat <- statin46 %>%
data.matrix() %>%
data.table::as.data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "AE") %>%
data.table::melt.data.table(
id.vars = c("AE"),
variable.name = "Drug",
value.name = "n"
) %>%
.[, `:=`(AE = as.factor(AE), Drug = as.factor(Drug))]
dat
dat
pp1 <- GLMMadaptive::mixed_model(
n ~ AE + Drug,
family = poisson(),
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
n ~ AE + Drug,
random = ~ (1|Drug) + (1|AE),
family = poisson(),
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
n ~ AE + Drug,
random = ~ ((1|Drug) + (1|AE)),
family = poisson(),
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
n ~ AE + Drug,
random = ~ ((1|Drug) + (1|AE)),
family = poisson,
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
n ~ AE + Drug,
random = ~ (1|AE),
family = poisson,
data = dat
)
dat
pp1 <- GLMMadaptive::mixed_model(
n ~ AE + Drug,
random = ~ (1|AE + 1|Drug),
family = poisson,
data = dat
)
dat <- statin46 %>%
data.matrix() %>%
data.table::as.data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "AE") %>%
data.table::melt.data.table(
id.vars = c("AE"),
variable.name = "Drug",
value.name = "nij"
) %>%
.[, `:=`(AE = as.factor(AE), Drug = as.factor(Drug))]
pp1 <- GLMMadaptive::mixed_model(
nij ~ AE + Drug,
random = ~ (1|AE + 1|Drug),
family = poisson,
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
nij ~ AE, # + Drug,
random = ~ (1|AE + 1|Drug),
family = poisson,
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
nij ~ 1, #AE, # + Drug,
random = ~ (1|AE + 1|Drug),
family = poisson,
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
nij ~ AE + Drug,
random = ~ (1|AE + 1|Drug),
family = GLMMadaptive::zi.poisson(),
data = dat
)
pp1 <- GLMMadaptive::mixed_model(
nij ~ AE + Drug,
random = ~ (1|AE + 1|Drug),
family = GLMMadaptive::zi.poisson(),
data = dat,
zi_fixed = ~AE
)
library(GLMMadaptive)
dat
dat
pp1
pp1 <- GLMMadaptive::mixed_model(
nij ~ AE + Drug,
random = ~ 1,# (1|AE + 1|Drug),
family = GLMMadaptive::zi.poisson(),
data = dat,
zi_fixed = ~AE
)
library(pvLRT)
pp <- tryCatch({rnorm(x)}, error = function(e) e)
pp
pp$message
# uses  |> pipe, so, requires R 4.1.0 or newer
library(tidyverse)
# library(vroom)
# library(future)
library(pvLRT)
library(data.table)
# ncore <- availableCores()
# plan(multicore) #uncomment for parallel
set.seed(42)
important_drug <- colnames(statin) %>%
c(colnames(gbca)) %>%
unique() %>%
setdiff("Other")
important_pt <- rownames(statin) %>%
c(rownames(gbca)) %>%
unique()
library(pvLRT)
process_data_dir <- "data-raw/fda-processed-data"
if (!dir.exists(process_data_dir)) {
dir.create(process_data_dir)
}
all_files <-
# list all zip files in the data/ascii directory
list.files(
"data-raw/fda-faers-data/ascii/",
pattern = "\\.zip",
full.names = TRUE
) %>%
str_subset("2022") %>%
str_subset("(?i)Q3")
# separate out faers and aers files
files_faers <-  grep(
"faers",
all_files,
value = TRUE,
ignore.case = TRUE
)
files_aers <- setdiff(all_files, files_faers)
# extract and process drug and AE data from
# each data file
read_data_faers_files <- function(this_zip, ...) {
# browser()
# full path
full_zip_path <- this_zip
# make a list of all elements inside the zip file
this_zip_contents <- glue::glue(
'unzip -l {this_zip}'
) %>%
system(intern = TRUE) %>%
strsplit(" ") %>%
map_chr(tail, 1)
# tmp <- unz(filename = full_zip_path,
#            glue::glue(
#   "ascii/ther12q4.txt"
# ))
#
# tmp <- unz(
#   full_zip_path,
#   glue::glue("ascii/outc12q4.txt")
#   # "ascii/DRUG04Q1.TXT"
# ) %>%
#   vroom::vroom(delim = "$")
#
#
# tmp
# extract the quarter name from the zip path
this_quarter_name <- this_zip %>%
strsplit("_") %>%
map_chr(tail, 1) %>%
strsplit("\\.") %>%
map_chr(1) %>%
toupper()
# remove the "decade" 20 from the beginning of the
# string
this_quarter_name_short <- this_quarter_name %>%
str_sub(3)
# ascii drug file
dat_files <- list(
"DRUG" = "DRUG",
"REACT" = "REAC"
) %>%
lapply(
function(this_type) {
# browser()
# if (this_type == "REAC") browser()
# DRUG or REAC file
this_filename_string_txt <- glue::glue(
"{this_type}{this_quarter_name_short}.txt"
)
# elements in the zip file that matches
# this_filename_string_txt
this_zipfile_element <- this_zip_contents %>%
grep(
this_filename_string_txt,
.,
value = TRUE,
ignore.case = TRUE
)
cat("** Now reading", this_filename_string_txt, "\n\n")
# read_cmd <- glue::glue(
#   "unzip -p {full_zip_path} {this_zipfile_element} | tr \\$ ' '"
# )
# extract the specific file from the zip,
# then paste on the linux command line
# then replace multiple $ delimeters by a single $
read_cmd <- glue::glue(
"unzip -p <<full_zip_path>> <<this_zipfile_element>> |\\
sed 's/\\$\\{2,\\}/\\$/g'",
.open = "<<",
.close = ">>"
)
dat <- tryCatch(
data.table::fread(
cmd = read_cmd,
fill = TRUE,
sep = "$"
),
error = function(e) e
)
if (is(dat, "error")) browser()
data.table::setnames(
dat,
names(dat),
names(dat) %>% toupper()
)
# glue::glue(
#   "unzip -l {full_zip_path}"
# ) %>%
#   system()
#
#
# # create a connection with the data file
# # inside the zip file, and then read using vroom
# dat <- tryCatch(
#   unz(
#     full_zip_path,
#     glue::glue("{this_zipfile_element}")
#     # "ascii/DRUG04Q1.TXT"
#   ) %>%
#     read_lines() %>%
#     str_replace_all("\\$", "\t") %>%
#     cat(file = tmpfile)
#
#   pp <- data.table::fread(tmpfile)
#
#
#   vroom::vroom(delim = "$"), #%>%
#   # mutate(QUARTER = this_quarter_name),
#   error = function(e) e
# )
if (is(dat, "error")) browser()
target_varnames <- c(
"PRIMARYID", "CASEID",
"ROLE_COD", "DRUGNAME",
"PROD_AI", "PT"
)
current_varnames <- sapply(
target_varnames,
function(xx) {
grep(
xx, names(dat),
ignore.case = TRUE, value = TRUE
)
}
) %>%
unlist()
out <- dat %>%
# select only the variables of interest
select(
all_of(unname(current_varnames))
) %>%
# clean variable names
data.table::setDT() %>%
unique() %>%
data.table::setnames(
old = unname(current_varnames),
new = names(current_varnames)
) %>%
data.table::setkey(PRIMARYID, CASEID) %>%
unique()
# # separate filtering for DRUG & REAC data
# {
#   if (this_type == "DRUG") {
#     # subset rows on  ROLE_COD %in% c('PS', 'SS')
#     # .[
#     #   grepl("PS|SS", ROLE_COD, ignore.case = TRUE)
#     # ][
#     #   ,
#     #   ROLE_COD := NULL
#     # ] %>%
#     #   unique()
#     unique(.)
#
#   } else {
#
#     browser()
#     tmp <- .
#     # filter out all AEs outside the 46 in the list
#     tmp[
#       str_detect(
#         PT,
#         paste(important_pt, collapse = "|") %>%
#           # ignore cases
#           paste0("(?i)", .),
#       )
#       # grepl(
#       #   paste(important_pt, collapse = "|"),
#       #   PT,
#       #   ignore.case = TRUE
#       # )
#     ][,
#       PT := toupper(PT)
#     ] %>%
#       unique()
#
#   }
# }
out
}
)
# browser()
#
#   dat1 <- dat_files$DRUG[
#     ,
#     .(sub = .(.SD)),
#     by = .(PRIMARYID, CASEID)
#   ][, nrow := sapply(sub, nrow)]
#
#
#   dat2 <- dat_files$REACT[
#     ,
#     .(sub = .(.SD)),
#     by = .(PRIMARYID, CASEID)
#   ][, nrow := sapply(sub, nrow)]
out <- merge(
dat_files$DRUG,
dat_files$REACT,
by = c("PRIMARYID", "CASEID"),
allow.cartesian = TRUE
)[,
QUARTER := this_quarter_name
] %>%
{
# add PROD_AI = NA if doesn't exist
if (is.null(.$PROD_AI)) .[, PROD_AI := NA]
else .
}
out
}
all_data_list <- files_faers %>%
# replace lapply by future.lapply for parallel
lapply(read_data_faers_files, future.seed = TRUE)
faers22q3raw <- all_data_combined[
# ROLE_COD %in% c("PS", "SS")
ROLE_COD == "PS"
][,
.(CASEID, DRUGNAME, PT)
][,
DRUGNAME := str_to_sentence(DRUGNAME)
][
PT %in% important_pt
] |>
setnames(
old = c("PT", "DRUGNAME"),
new = c("AE", "DRUG")
)
all_data_combined <- data.table::rbindlist(
all_data_list,
use.names = TRUE
)
faers22q3raw <- all_data_combined[
# ROLE_COD %in% c("PS", "SS")
ROLE_COD == "PS"
][,
.(CASEID, DRUGNAME, PT)
][,
DRUGNAME := str_to_sentence(DRUGNAME)
][
PT %in% important_pt
] |>
setnames(
old = c("PT", "DRUGNAME"),
new = c("AE", "DRUG")
)
usethis::use_data(faers22q3raw, compress = "xz", overwrite = TRUE)
-c("1")
-"x"
?convert_raw_to_contin_table
?convert_raw_to_contin_table
# convert to contingency table form incidence (non-aggregated) raw data
# AE subset = AEs in statin46
# Durg subset = union of statin46 and gbca drugs
tab1 <- convert_raw_to_contin_table(
rawdata = faers22q3raw,
Drug_col_name = "DRUG",
AE_col_name = "AE",
id_col_name = "CASEID",
aggregated = FALSE,
other_AE_excludes = rownames(statin46),
other_Drug_excludes = union(colnames(gbca), colnames(statin)),
create_other_Drug_col = TRUE,
create_other_AE_row = FALSE
)
# convert to contingency table AFTER aggregating and counting
# the total number of incidences of each (AE, Drug) pair
## Same AE and Drug subsets as before
## aggregation (counting) done using data.table dt[i, j, by] syntax
## uses magrittr %>% pipe
tab2 <- data.table::as.data.table(
faers22q3raw
)[
,
.(COUNT = length(unique(CASEID))),
by = .(DRUG, AE)
] %>%
convert_raw_to_contin_table(
Drug_col_name = "DRUG",
AE_col_name = "AE",
count_col_name = "COUNT",
aggregated = TRUE,
other_AE_excludes = rownames(statin46),
other_Drug_excludes = union(colnames(gbca), colnames(statin)),
create_other_Drug_col = TRUE,
create_other_AE_row = FALSE
)
all.equal(tab1, tab2)
# use the contingency table produced above in pvlrt()
## 500 bootstrap iterations (nsim) in the example below
## is for quick demonstration only --
## we recommended setting nsim to 10000 (default) or bigger
test1 <- pvlrt(tab1, nsim = 500)
test1
plot(mtcars)
citation()
version
devtools::check_win_devel()
. = 1
x %>% plot(.)
library(magritt)
library(magrittr)
rnorm(100) %>% plot(x = .)
library(pvLRT)
faers22q3raw
source("C:/Users/chakrab2/Documents/GitHub/pvLRT/R/convert_raw_to_contin_tab.R")
library(pvLRT)
?pvlrt
library(pvLRT)
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_oldrelease()
