n = 1,
row_marginals = rowSums(statin46),
col_marginals = colSums(statin46),
signal_mat = signal_mat,
omega_vec = omega_tru,
no_zero_inflation_idx = list(
c(1, 1),
# c(nrow(statin46), 0), # the entire last row
# c(0, ncol(statin46)) # the entire last column
)
)[[1]]
sim_statin <- r_contin_table_zip(
n = 1,
row_marginals = rowSums(statin46),
col_marginals = colSums(statin46),
signal_mat = signal_mat,
omega_vec = omega_tru,
no_zero_inflation_idx = list(
c(1, 1)#,
# c(nrow(statin46), 0), # the entire last row
# c(0, ncol(statin46)) # the entire last column
)
)[[1]]
test1 <- lrt_zi_poisson(
contin_table = sim_statin,
skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
attr(test1, "omega") %>% round(3)
test2 <- lrt_zi_poisson(
contin_table = sim_statin,
use_gamma_smooth_omega = TRUE,
skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
tmp <- lrt_vanilla_poisson(
contin_table = sim_statin#,
# skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
logLR_vec1
logLR_vec %>% round(2)
tmp <- lrt_vanilla_poisson(
contin_table = sim_statin#,
# skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
tmp <- lrt_vanilla_poisson(
contin_table = sim_statin#,
# skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
tmp <- lrt_vanilla_poisson(
contin_table = sim_statin#,
# skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
library(pvLRT)
attr(tmp, "lrstat")
attr(tmp, "lrstat") %>% round(2)
tmp1 <- lrt_zi_poisson(
contin_table = sim_statin,
omega_est_vec = rep(0, ncol(sim_statin))
# skip_null_omega_estimation = TRUE
# set to TRUE for speed, should be FALSE in the final analysis
)
attr(tmp1, "lrstat") %>% round(2)
lr1 <- attr(tmp1, "lrstat") %>% round(2)
lr <- attr(tmp, "lrstat") %>% round(2)
c(lr - lr1) %>% hist()
c(lr - lr1) %>% summary()
plot(rnorm(100))
plot(rnorm(100))
plot(rnorm(1000))
rnorm(1000) %>% plot()
rnorm(1000) %>% hist()
rnorm(1000) %>% hist()
rnorm(1000) %>% {hist(.); plot(density(.))}
rnorm(1000) %>% {hist(.); plot(density(.), add=T)}
rnorm(1000) %>% {hist(.); points(density(.))}
rnorm(1000) %>% {hist(., density=T); points(density(.))}
?hist
rnorm(1000) %>% {hist(., probability=T); points(density(.))}
rnorm(1000) %>% {hist(., probability=T); plot(density(.))}
rnorm(1000) %>% {hist(., probability=T); points(density(.), add=TRUE, lty = 1)}
rnorm(1000) %>% {hist(., probability=T); points(density(.), add=TRUE, type = "l")}
rnorm(1000) %>% {hist(., probability=T); points(density(.), type = "l")}
rnorm(10000) %>% {hist(., probability=T); points(density(.), type = "l")}
rnorm(1e5) %>% {hist(., probability=T); points(density(.), type = "l")}
rnorm(1e6) %>% {hist(., probability=T); points(density(.), type = "l")}
rnorm(1e5) %>% {hist(., probability=T); points(density(.), type = "l")}
rnorm(1e5) %>% {hist(., probability=T); points(density(.), type = "l"); plot(rnorm, add = TRUE)}
rnorm(1e6) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE)}
rnorm(1e6) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE, color = "red")}
rnorm(1e6) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE, col = "red")}
rnorm(1e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE, col = "red")}
rnorm(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE, col = "red")}
rnorm(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE, col = "red")}
rnorm(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dnorm, add = TRUE, col = "red")}
dunif(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dunif, add = TRUE, col = "red")}
dgamma(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dgamma, add = TRUE, col = "red")}
dgamma(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dgamma, add = TRUE, col = "red")}
rgamma(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dgamma, add = TRUE, col = "red")}
rcauchy(5e4) %>% {hist(., probability=T); points(density(.), type = "l"); plot(dcauchy, add = TRUE, col = "red")}
rcauchy(5e4) %>% {hist(., probability=T); points(density(.), type = "l")}
rcauchy(5e4) %>% {hist(., probability=T); points(density(.), type = "l")}
rcauchy(5e4) %>% {hist(., probability=T); points(density(.), type = "l")}
rcauchy(5e4) %>% {hist(., probability=T); points(density(.), type = "l")}
runif(10000)
runif(2e5)
runif(1e5)
runif(1e5)
runif(1e5) %>% density() %>% plot()
runif(1e6) %>% density() %>% plot()
runif(1e7) %>% density() %>% plot()
runif(1e5) %>% density() %>% plot()
runif(1e4) %>% density() %>% plot()
runif(1e3) %>% density() %>% plot()
runif(1e4) %>% density() %>% plot()
runif(1e5) %>% density() %>% plot()
runif(1e5) %>% density() %>% plot()
runif(1e6) %>% density() %>% plot()
rcauchy(1e6) %>% density() %>% plot()
rt(1e6) %>% density() %>% plot()
rt(1e6, df = 15) %>% density() %>% plot()
rt(1e6, df = 1) %>% density() %>% plot()
rt(1e6, df = 0.01) %>% density() %>% plot()
rt(1e6, df = 0.1) %>% density() %>% plot()
rt(1e6, df = 10) %>% density() %>% plot()
rt(1e6, df = 100) %>% density() %>% plot()
rt(1e6, df = 30) %>% density() %>% plot()
rt(1e6, df = 30) %>% density() %>% plot()
rt(1e6, df = 300) %>% density() %>% plot()
rt(1e6, df = 3000) %>% density() %>% plot()
rt(1e6, df = 50) %>% density() %>% plot()
rt(1e6, df = 50) %>% density() %>% plot()
rt(1e6, df = 50) %>% density() %>% plot()
rt(1e6, df = 500) %>% density() %>% plot()
rt(1e6, df = 0.500) %>% density() %>% plot()
rt(1e6, df = 0.6) %>% density() %>% plot()
rt(1e6, df = 0.7) %>% density() %>% plot()
rt(1e6, df = 0.005) %>% density() %>% plot()
rt(1e4, df = 0.005) %>% density() %>% plot()
rt(1e4, df = 0.005) %>% density() %>% plot()
rt(1e4, df = 1) %>% density() %>% plot()
gc()
ls()
rm(list=ls())
gc()
.rs.restartR()
rnorm(100) %>% plot()
library(tidyverse)
library(pvLRT)
?lrt_zi_poisson
test1 <- lrt_zi_poisson(lovastatin)
all_log_lrt <- mapply(
function(jstar, do_this_test) {
if (do_this_test) {
theta_est_vec_list <- list(
# corresponds to \hat lambda_ij = 1
null =  Eij_mat[, jstar],
# corresponds to \hat lambda_ij = max(1, n_ij/E_ij)
alt = pmax(n_ij_mat[, jstar], Eij_mat[, jstar])
)
log_den_vec_list <- lapply(
theta_est_vec_list,
function(theta_vec) {
dzipois(
x = n_ij_mat[, jstar],
lambda = theta_vec,
pi = omega_est_vec[jstar],
log = TRUE
)
}
)
res <- pmax(log_den_vec_list$alt - log_den_vec_list$null, 0)
} else {
res <- rep(0, I)
}
setNames(res, rownames(n_ij_mat))
},
1:J,
1:J %in% test_j_idx,
SIMPLIFY = FALSE
)  %>%
setNames(colnames(n_ij_mat)) %>%
do.call(cbind, .)
Eij_mat_safe <- pmax(Eij_mat, 1e-20)
Eijmat_safe <- pmax(Eij_mat, 1e-20)
Eijmat_safe
lambda_ij_mat <- pmax(n_ij_mat/Eijmat_safe, 1)
hat_lambda_ij_mat <- pmax(n_ij_mat/Eijmat_safe, 1)
hat_lambda_ij_mat
all_log_lrt <- -(hat_lambda_ij_mat - 1) * Eij_mat +
n_ij_mat * log(hat_lambda_ij_mat)
all_log_lrt1 <- mapply(
function(jstar, do_this_test) {
if (do_this_test) {
theta_est_vec_list <- list(
# corresponds to \hat lambda_ij = 1
null =  Eij_mat[, jstar],
# corresponds to \hat lambda_ij = max(1, n_ij/E_ij)
alt = pmax(n_ij_mat[, jstar], Eij_mat[, jstar])
)
log_den_vec_list <- lapply(
theta_est_vec_list,
function(theta_vec) {
dzipois(
x = n_ij_mat[, jstar],
lambda = theta_vec,
pi = omega_est_vec[jstar],
log = TRUE
)
}
)
res <- pmax(log_den_vec_list$alt - log_den_vec_list$null, 0)
} else {
res <- rep(0, I)
}
setNames(res, rownames(n_ij_mat))
},
1:J,
1:J %in% test_j_idx,
SIMPLIFY = FALSE
)  %>%
setNames(colnames(n_ij_mat)) %>%
do.call(cbind, .)
c(all_log_lrt - all_log_lrt1)
c(all_log_lrt - all_log_lrt1) %>% summary()
dimnames(all_log_lrt)
library(pvLRT)
test1 <- lrt_zi_poisson(lovastatin)
test1 <- lrt_zi_poisson(lovastatin)
library(pvLRT)
test1 <- lrt_zi_poisson(lovastatin)
test1 <- lrt_zi_poisson(lovastatin, skip_null_omega_estimation = TRUE)
test1 <- lrt_zi_poisson(lovastatin, omega_est_vec = rep(0, ncol(lovastatin)))
test1 <- lrt_vanilla_poisson(lovastatin)
library(pvLRT)
test1 <- lrt_vanilla_poisson(lovastatin)
test1 <- lrt_zi_poisson(lovastatin)
poisson_mean_hat
n_0_idx <- n_ij == 0
num_n_pos <- sum(!n_0_idx)
n_0_idx
poisson_mean_n_0_idx <- c(E_ij[n_0_idx])
poisson_mean_n_0_idx
#  BFGS on the logit scale
neg_llik <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
# tmp <- dzipois(
#   x = c(n_ij),
#   lambda = c(poisson_mean_hat),
#   pi = omega,
#   log = TRUE
# )
tmp <- log(omega + (1-omega) * c(-poisson_mean_n_0_idx))
sum(tmp) + num_n_pos * log(1-omega)
}
#  BFGS on the logit scale
neg_llik <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
# tmp <- dzipois(
#   x = c(n_ij),
#   lambda = c(poisson_mean_hat),
#   pi = omega,
#   log = TRUE
# )
tmp <- log(omega + (1-omega) * c(-poisson_mean_n_0_idx))
-(sum(tmp) + num_n_pos * log(1-omega))
}
neg_llik1 <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
tmp <- dzipois(
x = c(n_ij),
lambda = c(poisson_mean_hat),
pi = omega,
log = TRUE
)
# tmp <- log(omega + (1-omega) * c(-poisson_mean_n_0_idx))
-sum(tmp)
}
neg_llik(1.35)
neg_llik1(1.35)
opt <-
tryCatch(
optim(
par = 0, #par_init,
fn = neg_llik,
method = "BFGS",
...
),
error = function(e) e
)
poisson_mean_n_0_idx
num_n_pos
#  BFGS on the logit scale
neg_llik <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
# tmp <- dzipois(
#   x = c(n_ij),
#   lambda = c(poisson_mean_hat),
#   pi = omega,
#   log = TRUE
# )
tmp <- log(omega + (1-omega) * exp(-poisson_mean_n_0_idx))
-(sum(tmp) + num_n_pos * log(1-omega))
}
neg_llik1 <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
tmp <- dzipois(
x = c(n_ij),
lambda = c(poisson_mean_hat),
pi = omega,
log = TRUE
)
# tmp <- log(omega + (1-omega) * c(-poisson_mean_n_0_idx))
-sum(tmp)
}
opt <-
tryCatch(
optim(
par = 0, #par_init,
fn = neg_llik,
method = "BFGS",
...
),
error = function(e) e
)
opt
opt1 <-
tryCatch(
optim(
par = 0, #par_init,
fn = neg_llik1,
method = "BFGS",
...
),
error = function(e) e
)
opt1
exp_neg_poisson_mean_n_0_idx <- exp(-c(E_ij[n_0_idx]))
exp_neg_poisson_mean_n_0_idx
num_n_pos <- sum(!n_0_idx)
exp_neg_poisson_mean_n_0_idx <- exp(-c(E_ij[n_0_idx]))
#  BFGS on the logit scale
neg_llik <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
# tmp <- dzipois(
#   x = c(n_ij),
#   lambda = c(poisson_mean_hat),
#   pi = omega,
#   log = TRUE
# )
tmp <- log(omega + (1-omega) * exp_neg_poisson_mean_n_0_idx)
-(sum(tmp) + num_n_pos * log(1-omega))
}
neg_llik1 <- function(logit_omega) {
# nu <- exp(par["log_nu"])
# # nu <- exp(par["nu"])
# # beta <- par["beta1"]
#
# sigma <- exp(par["log_sigma"])
# # sigma <- par["sigma"]
# sigma_k <- sigma * c(E_ij_adj)
omega <- expit(logit_omega)
# pi <- par["pi"]
tmp <- dzipois(
x = c(n_ij),
lambda = c(poisson_mean_hat),
pi = omega,
log = TRUE
)
# tmp <- log(omega + (1-omega) * c(-poisson_mean_n_0_idx))
-sum(tmp)
}
opt1 <-
tryCatch(
optim(
par = 0, #par_init,
fn = neg_llik1,
method = "BFGS",
...
),
error = function(e) e
)
opt1
opt <-
tryCatch(
optim(
par = 0, #par_init,
fn = neg_llik,
method = "BFGS",
...
),
error = function(e) e
)
opt
opt1 <-
tryCatch(
optim(
par = 0.5, #par_init,
lower = 0,
upper = 1,
fn = neg_llik1,
method = "Brent",
...
),
error = function(e) e
)
opt1
exp(-3.8)
opt1 <-
tryCatch(
optim(
par = 0.5, #par_init,
lower = 0,
upper = 1,
fn = neg_llik1,
method = "L-BFGS-B",
...
),
error = function(e) e
)
opt1
opt <-
tryCatch(
optim(
par = 0, #par_init,
fn = neg_llik,
method = "BFGS",
...
),
error = function(e) e
)
opt
# if (!is(opt, "error")) {
est_omega <- opt$par %>%
expit() %>%
unname()
obj_val <- -opt$value
obj_null <- -neg_llik(-Inf)
opt_scale <- "logit_omega"
lrstat <- obj_val - obj_null
lrstat_adj <- ifelse(lrstat < 0, 0, lrstat)
out <- c(
omega = est_omega,
llik = obj_val,
optim = opt,
lrstat = lrstat_adj,
opt_scale = opt_scale
)
out
library(pvLRT)
test1 <- lrt_zi_poisson(lovastatin)
attr(test1, "omega")
attr(test1, "omega") %>% round(2)
test1 <- lrt_zi_poisson(statin46)
attr(test1, "omega")
attr(test1, "omega") %>% round(3)
library(pvLRT)
devtools::build()
rnorm(100) %>% plot()
plot(rnorm(100))
