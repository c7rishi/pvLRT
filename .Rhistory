# select only the variables of interest
select(
all_of(unname(current_varnames))
) %>%
# clean variable names
data.table::setDT() %>%
unique() %>%
data.table::setnames(
old = unname(current_varnames),
new = names(current_varnames)
) %>%
data.table::setkey(PRIMARYID, CASEID) %>%
unique()
# # separate filtering for DRUG & REAC data
# {
#   if (this_type == "DRUG") {
#     # subset rows on  ROLE_COD %in% c('PS', 'SS')
#     # .[
#     #   grepl("PS|SS", ROLE_COD, ignore.case = TRUE)
#     # ][
#     #   ,
#     #   ROLE_COD := NULL
#     # ] %>%
#     #   unique()
#     unique(.)
#
#   } else {
#
#     browser()
#     tmp <- .
#     # filter out all AEs outside the 46 in the list
#     tmp[
#       str_detect(
#         PT,
#         paste(important_pt, collapse = "|") %>%
#           # ignore cases
#           paste0("(?i)", .),
#       )
#       # grepl(
#       #   paste(important_pt, collapse = "|"),
#       #   PT,
#       #   ignore.case = TRUE
#       # )
#     ][,
#       PT := toupper(PT)
#     ] %>%
#       unique()
#
#   }
# }
out
}
)
# browser()
#
#   dat1 <- dat_files$DRUG[
#     ,
#     .(sub = .(.SD)),
#     by = .(PRIMARYID, CASEID)
#   ][, nrow := sapply(sub, nrow)]
#
#
#   dat2 <- dat_files$REACT[
#     ,
#     .(sub = .(.SD)),
#     by = .(PRIMARYID, CASEID)
#   ][, nrow := sapply(sub, nrow)]
out <- merge(
dat_files$DRUG,
dat_files$REACT,
by = c("PRIMARYID", "CASEID"),
allow.cartesian = TRUE
)[,
QUARTER := this_quarter_name
] %>%
{
# add PROD_AI = NA if doesn't exist
if (is.null(.$PROD_AI)) .[, PROD_AI := NA]
else .
}
out
}
all_data_list <- files_faers %>%
# replace lapply by future.lapply for parallel
lapply(read_data_faers_files, future.seed = TRUE)
faers22q3raw <- all_data_combined[
# ROLE_COD %in% c("PS", "SS")
ROLE_COD == "PS"
][,
.(CASEID, DRUGNAME, PT)
][,
DRUGNAME := str_to_sentence(DRUGNAME)
][
PT %in% important_pt
] |>
setnames(
old = c("PT", "DRUGNAME"),
new = c("AE", "DRUG")
)
all_data_combined <- data.table::rbindlist(
all_data_list,
use.names = TRUE
)
faers22q3raw <- all_data_combined[
# ROLE_COD %in% c("PS", "SS")
ROLE_COD == "PS"
][,
.(CASEID, DRUGNAME, PT)
][,
DRUGNAME := str_to_sentence(DRUGNAME)
][
PT %in% important_pt
] |>
setnames(
old = c("PT", "DRUGNAME"),
new = c("AE", "DRUG")
)
usethis::use_data(faers22q3raw, compress = "xz", overwrite = TRUE)
-c("1")
-"x"
?convert_raw_to_contin_table
?convert_raw_to_contin_table
# convert to contingency table form incidence (non-aggregated) raw data
# AE subset = AEs in statin46
# Durg subset = union of statin46 and gbca drugs
tab1 <- convert_raw_to_contin_table(
rawdata = faers22q3raw,
Drug_col_name = "DRUG",
AE_col_name = "AE",
id_col_name = "CASEID",
aggregated = FALSE,
other_AE_excludes = rownames(statin46),
other_Drug_excludes = union(colnames(gbca), colnames(statin)),
create_other_Drug_col = TRUE,
create_other_AE_row = FALSE
)
# convert to contingency table AFTER aggregating and counting
# the total number of incidences of each (AE, Drug) pair
## Same AE and Drug subsets as before
## aggregation (counting) done using data.table dt[i, j, by] syntax
## uses magrittr %>% pipe
tab2 <- data.table::as.data.table(
faers22q3raw
)[
,
.(COUNT = length(unique(CASEID))),
by = .(DRUG, AE)
] %>%
convert_raw_to_contin_table(
Drug_col_name = "DRUG",
AE_col_name = "AE",
count_col_name = "COUNT",
aggregated = TRUE,
other_AE_excludes = rownames(statin46),
other_Drug_excludes = union(colnames(gbca), colnames(statin)),
create_other_Drug_col = TRUE,
create_other_AE_row = FALSE
)
all.equal(tab1, tab2)
# use the contingency table produced above in pvlrt()
## 500 bootstrap iterations (nsim) in the example below
## is for quick demonstration only --
## we recommended setting nsim to 10000 (default) or bigger
test1 <- pvlrt(tab1, nsim = 500)
test1
plot(mtcars)
citation()
version
devtools::check_win_devel()
. = 1
x %>% plot(.)
library(magritt)
library(magrittr)
rnorm(100) %>% plot(x = .)
library(pvLRT)
faers22q3raw
source("C:/Users/chakrab2/Documents/GitHub/pvLRT/R/convert_raw_to_contin_tab.R")
library(pvLRT)
?pvlrt
library(pvLRT)
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_oldrelease()
library(pvLRT)
?pvlrt
# grouped drugs --
# group 1: drug 1, drug 2
# group 2: drug 3, drug 4
# drug 5, 6, in their own groups
# 7 is not tested, so excluded from test_drug_idx
drug_groups <- list(c(1, 2), c(3, 4))
# 5, 6 not present in drug_groups, so each will form their own groups
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
len_check_2 <- c(1:ncol(contin_table)) %>%
setdiff(sort(unlist(drug_class_idx))) %>%
length() %>%
{
. == 0
}
len_check_2
drug_class_idx
`%>or>=%` <- if (pval_ineq_strict) `>` else `>=`
is.character(test_drug_idx)
stopifnot(all(test_drug_idx) %in% colnames(contin_table))
sort(unlist(drug_class_idx))
drug_class_missing_idx <- sort(unlist(drug_class_idx)) %>%
{
if (is.character(.)) setdiff(colnames(contin_table), .)
else setdiff(1:ncol(contin_table), .)
}
drug_class_missing_idx
drug_class_missing_idx
drug_class_idx <- drug_class_idx %>% c(as.list(drug_class_missing_idx))
drug_class_idx
lr_stat_func
.lr_stat_pq_1tab
drugnames_positions <- seq_len(ncol(contin_table)) %>%
setNames(colnames(contin_table))
drugnames_positions
(unlist(test_drug_idx))
(is.character(unlist(test_drug_idx)))
drug_class_idx_orig
drug_class_idx
drug_class_idx
library(pvLRT)
# grouped drugs --
# group 1: drug 1, drug 2
# group 2: drug 3, drug 4
# drug 5, 6, in their own groups
# 7 is not tested, so excluded from test_drug_idx
drug_groups <- list(c(1, 2), c(3, 4))
# 5, 6 not present in drug_groups, so each will form their own groups
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46))
drug_groups_colnames
# instead of column positions column names can also be supplied
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
## column name version of drug_groups
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test2
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
library(pvLRT)
# grouped drugs --
# group 1: drug 1, drug 2
# group 2: drug 3, drug 4
# drug 5, 6, in their own groups
## 7 is not tested, so excluded from test_drug_idx (default)
## if needed, include 7 in test_drug_idx
drug_groups <- list(c(1, 2), c(3, 4))
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
## column name version of drug_groups
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
test2
test20
# grouped drugs --
# group 1: drug 1, drug 2
# group 2: drug 3, drug 4
# drug 5, 6, in their own groups
## 7 is not tested, so excluded from test_drug_idx (default)
## if needed, include 7 in test_drug_idx
drug_groups <- list(c(1, 2), c(3, 4))
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
## column name version of drug_groups
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
?all.equal.character
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
## column name version of drug_groups
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
attributes(test2) %>% names()
library(pvLRT)
all.equal(test2, test20)
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
library(pvLRT)
library(pvLRT)
library(pvLRT)
# grouped drugs --
# group 1: drug 1, drug 2
# group 2: drug 3, drug 4
# drug 5, 6, in their own groups
## 7 is not tested, so excluded from test_drug_idx (default)
## if needed, include 7 in test_drug_idx
drug_groups <- list(c(1, 2), c(3, 4))
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
## column name version of drug_groups
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
library(pvLRT)
all.equal(test2, test20)
?all.equal.default
target = test2
test2
current = test20
attributes(target)$run_time <- attributes(current)$run_time <- NULL
target
all.equal.default(target, current)
library(pvLRT)
?all.equal.pvlrt
library(pvLRT)
?all.equal.pvlrt
## if needed, include 7 in test_drug_idx
drug_groups <- list(c(1, 2), c(3, 4))
## 5, 6 not present in drug_groups, so each will form their own groups
set.seed(50)
test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
test2
# instead of column positions column names can also be supplied
## column name version of drug_groups
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
set.seed(50)
test20 <- pvlrt(statin46, drug_class_idx = drug_groups_colnames, nsim = 500)
test20
all.equal(test2, test20)
2
library(pvLRT)
?pvlrt
head(colnames(statin46), -1)
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
test_drug_colnames <- head(colnames(statin46), -1)
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
library(pvLRT)
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
library(pvLRT)
library(pvLRT)
#' ##
#' test2 <- pvlrt(statin46, drug_class_idx = drug_groups, nsim = 500)
#' test2
#'
#' # instead of column positions column names can also be supplied
#' # in drug_class_idx and/or test_drug_idx
#' ## column name version of drug_groups
#' drug_groups_colnames <- lapply(drug_groups, function(i) colnames(statin46)[i])
#' test_drug_colnames <- head(colnames(statin46), -1)
#' set.seed(50)
test20 <- pvlrt(
statin46,
test_drug_idx = test_drug_colnames,
drug_class_idx = drug_groups_colnames,
nsim = 500
)
?plot(cars)
?plot
?plot
rnorm(100)
library(pvLRT)
?plot
library(pvLRT)
library(pvLRT)
library(pvLRT)
?glmnet::glmnet
?fisher.test
?convert_raw_to_contin_table
library(pvLRT)
?pvLRT::pvlrt
test2 <- statin46 %>%
`dimnames<-`(list(NULL, NULL)) %>%
pvlrt(drug_class_idx = drug_groups, nsim = 500)
library(pvLRT)
test2 <- statin46 %>%
`dimnames<-`(list(NULL, NULL)) %>%
pvlrt(drug_class_idx = drug_groups, nsim = 500)
pvLRT::faers22q3raw
?pvLRT::faers22q3raw
?convert_raw_to_contin_table
devtools::build_manual()
library(pvLRT)
?all.equal.pvlrt
devtools::build()
